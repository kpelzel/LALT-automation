substitutions:
  device_number: "5"
  ip_suffix: "105"
  deviceid: "house_light_${device_number}"
  esphomename: "house-light-${device_number}" # underscore in hostname is discouraged
  devicename: "House Light ${device_number}"

esphome:
  name: $esphomename
  platform: ESP32
  board: esp32doit-devkit-v1
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: ${deviceid}
          brightness: 100%
          color_brightness: 100%
          red: 100%
          green: 69%
          blue: 0%
          white: 100%
          transition_length: 0.35s
      - delay: 0.5s # without this delay, the transition_length of the previous command will be ignored
      - light.control:
          id: ${deviceid}
          effect: "Non-Addressable E1.31"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # fast_connect: true
  manual_ip:
    static_ip: "192.168.86.${ip_suffix}"
    gateway: 192.168.86.1
    subnet: 255.255.255.0
  domain: .local
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $deviceid

captive_portal:

# Enable Home Assistant API
api:

ota:

external_components:
  - source:
      type: git
      url: https://github.com/kpelzel/esphome
      ref: non-addressable-e131
    components: [e131]
    refresh: always

e131:
  method: unicast

web_server:
  port: 80

# Enable logging to ESPHome
logger:
  # Disable logging to serial
  # baud_rate: 0
  # level: DEBUG

switch:
  - platform: restart
    name: "${devicename} Restart"

time:
  - platform: homeassistant
    id: homeassistant_time

# Define output pins
output:
  - platform: ledc
    id: output_red
    pin: GPIO14
    power_supply: rgb_power
  - platform: ledc
    id: output_green
    pin: GPIO26
    power_supply: rgb_power
  - platform: ledc
    id: output_blue
    pin: GPIO13
    power_supply: rgb_power
  - platform: ledc
    id: output_white
    pin: GPIO15
    # min_power: 0.2
    # zero_means_zero: true

power_supply:
  - id: rgb_power
    pin: GPIO23
    enable_time: 0ms

# Define a light entity
light:
  - platform: rgbw
    name: ${devicename}
    id: ${deviceid}
    red: output_red
    green: output_green
    blue: output_blue
    white: output_white
    default_transition_length: 0.25s
    restore_mode: ALWAYS_OFF
    effects:
      - flicker:
      - random:
          name: "Slow Random"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "Fast Random"
          transition_length: 2s
          update_interval: 2s
      - lambda:
          name: Slow Rainbow
          update_interval: 10ms
          lambda: |-
            auto call = id(${deviceid}).turn_on();
            auto state = id(homeassistant_time).now().timestamp % 180;
            call.set_transition_length(15000);
            call.set_white(0.0);
            if (state == 0) {
              call.set_rgb(1.0, 0.0, 0.0);
              call.perform();
            } else if (state == 15) {
              call.set_rgb(1.0, 0.5, 0.0);
              call.perform();
            } else if (state == 30) {
              call.set_rgb(1.0, 1.0, 0.0);
              call.perform();
            } else if (state == 45) {
              call.set_rgb(0.5, 1.0, 0.0);
              call.perform();
            } else if (state == 60) {
              call.set_rgb(0.0, 1.0, 0.0);
              call.perform();
            } else if (state == 75) {
              call.set_rgb(0.0, 1.0, 0.5);
              call.perform();
            } else if (state == 90) {
              call.set_rgb(0.0, 1.0, 1.0);
              call.perform();
            } else if (state == 105) {
              call.set_rgb(0.0, 0.5, 1.0);
              call.perform();
            } else if (state == 120) {
              call.set_rgb(0.0, 0.0, 1.0);
              call.perform();
            } else if (state == 135) {
              call.set_rgb(0.5, 0.0, 1.0);
              call.perform();
            } else if (state == 150) {
              call.set_rgb(1.0, 0.0, 1.0);
              call.perform();
            } else if (state == 165) {
              call.set_rgb(1.0, 0.0, 0.5);
              call.perform();
            }
      - lambda:
          name: Fast Rainbow
          update_interval: 10ms
          lambda: |-
            auto call = id(${deviceid}).turn_on();
            auto state = id(homeassistant_time).now().timestamp % 36;
            call.set_transition_length(3000);
            call.set_white(0.0);
            if (state == 0) {
              call.set_rgb(1.0, 0.0, 0.0);
              call.perform();
            } else if (state == 3) {
              call.set_rgb(1.0, 0.5, 0.0);
              call.perform();
            } else if (state == 6) {
              call.set_rgb(1.0, 1.0, 0.0);
              call.perform();
            } else if (state == 9) {
              call.set_rgb(0.5, 1.0, 0.0);
              call.perform();
            } else if (state == 12) {
              call.set_rgb(0.0, 1.0, 0.0);
              call.perform();
            } else if (state == 15) {
              call.set_rgb(0.0, 1.0, 0.5);
              call.perform();
            } else if (state == 18) {
              call.set_rgb(0.0, 1.0, 1.0);
              call.perform();
            } else if (state == 21) {
              call.set_rgb(0.0, 0.5, 1.0);
              call.perform();
            } else if (state == 24) {
              call.set_rgb(0.0, 0.0, 1.0);
              call.perform();
            } else if (state == 27) {
              call.set_rgb(0.5, 0.0, 1.0);
              call.perform();
            } else if (state == 30) {
              call.set_rgb(1.0, 0.0, 1.0);
              call.perform();
            } else if (state == 33) {
              call.set_rgb(1.0, 0.0, 0.5);
              call.perform();
            }
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s
      - strobe:
      - non_addressable_e131:
          universe: ${device_number}
          channel_map:
            red: 0
            green: 1
            blue: 2
            white: 3
